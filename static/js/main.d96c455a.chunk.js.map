{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","_this$state","length","props","add","alert","maxDate","parseInt","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","marginRight","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","localeCompare","activeTasks","map","components_Task","key","doneTasks","Fragment","App","counter","deleteTask","Object","toConsumableArray","index","findIndex","splice","changeTaskStatus","forEach","getTime","addTask","prevState","concat","src_components_AddTask","src_components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d96c455a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate,\r\n  };\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    });\r\n  };\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { text, date, checked } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate,\r\n        });\r\n      }\r\n    } else {\r\n      alert(\"The task must have a minimum of 3 characters!\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let maxDate = parseInt(this.minDate.slice(0, 4)) + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <div className=\"add\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add task\"\r\n            value={this.state.text}\r\n            onChange={this.handleText}\r\n          />\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={this.state.checked}\r\n            id=\"important\"\r\n            onChange={this.handleCheckbox}\r\n          />\r\n          <label htmlFor=\"important\">Priority</label>\r\n        </div>\r\n        <label htmlFor=\"date\"> By when to do: </label>\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.minDate}\r\n          max={maxDate}\r\n          onChange={this.handleDate}\r\n        />\r\n        <button className=\"btn\" onClick={this.handleClick}>\r\n          Add\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = (props) => {\r\n  const style = {\r\n    color: \"red\",\r\n  };\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> to{\" \"}\r\n          <span style={{ marginRight: \"10px\" }}>{date} </span>\r\n          <button onClick={() => props.change(id)}>Task done</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong>{\" \"}\r\n          <em style={{ marginRight: \"5px\" }}>(complete to: {date}) </em>\r\n          Task confirmed: <span>{finish}</span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\nimport \"./TaskList.css\";\r\n\r\nconst TaskList = (props) => {\r\n  const active = props.tasks.filter((task) => task.active);\r\n  const done = props.tasks.filter((task) => !task.active);\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => a.text.localeCompare(b.text));\r\n  }\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => b.finishDate - a.finishDate);\r\n  }\r\n\r\n  const activeTasks = active.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  const doneTasks = done.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  return (\r\n    <>\r\n      <div className=\"activeTask\">\r\n        <h1>Tasks</h1>\r\n        {activeTasks.length > 0 ? (\r\n          activeTasks\r\n        ) : (\r\n          <p>No tasks, you should be happy!</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"completedTasks\">\r\n        <h1>\r\n          Completed tasks <em>({done.length})</em>\r\n        </h1>\r\n        {done.length > 5 && <p className=\"five\">Last five completed tasks</p>}\r\n\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\n\nclass App extends Component {\n  counter = 5;\n  state = {\n    tasks: [],\n  };\n\n  deleteTask = (id) => {\n    const tasks = [...this.state.tasks];\n    const index = tasks.findIndex((task) => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({\n      tasks,\n    });\n  };\n\n  changeTaskStatus = (id) => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks,\n    });\n  };\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    };\n    this.counter++;\n    this.setState((prevState) => ({\n      tasks: [...prevState.tasks, task],\n    }));\n    return true;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"todo\">ToDo App</p>\n        <AddTask add={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}